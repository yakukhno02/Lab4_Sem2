import tkinter as tk
from graph_generator import generate_adjacency_matrices
from draw_graph import draw_graph
from graph_analysis import (
    get_degrees_directed,
    get_degrees_undirected,
    is_regular,
    get_isolated_and_leaf_vertices
)


n1, n2, n3, n4 = 4, 1, 3, 3
Adir, Aundir, n = generate_adjacency_matrices(n1, n2, n3, n4)

root = tk.Tk()
root.title("–ì—Ä–∞—Ñ–∏")
canvas = tk.Canvas(root, width=1300, height=600, bg="white")
canvas.pack()

draw_graph(canvas, Adir, directed=True, n=n, offset_x=0)
draw_graph(canvas, Aundir, directed=False, n=n, offset_x=650)

canvas.create_text(325, 20, text="–ù–∞–ø—Ä—è–º–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ", font=("Arial", 14, "bold"))
canvas.create_text(975, 20, text="–ù–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ", font=("Arial", 14, "bold"))

# üîç –ê–Ω–∞–ª—ñ–∑ –≥—Ä–∞—Ñ—ñ–≤

# 1. –°—Ç—É–ø–µ–Ω—ñ —Ç–∞ –Ω–∞–ø—ñ–≤—Å—Ç—É–ø–µ–Ω—ñ
in_deg, out_deg = get_degrees_directed(Adir)
deg_undir = get_degrees_undirected(Aundir)

print("üî∑ –ù–∞–ø—Ä—è–º–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ:")
print(" –í–µ—Ä—à–∏–Ω–∞ | –ù–∞–ø—ñ–≤—Å—Ç–µ–ø. –∑–∞—Ö–æ–¥—É | –ù–∞–ø—ñ–≤—Å—Ç–µ–ø. –≤–∏—Ö–æ–¥—É | –ü–æ–≤–Ω–∏–π —Å—Ç–µ–ø—ñ–Ω—å")
total_deg_dir = []
for i in range(n):
    total = in_deg[i] + out_deg[i]
    total_deg_dir.append(total)
    print(f"{i+1:>8} | {in_deg[i]:>17} | {out_deg[i]:>17} | {total:>16}")

# 3. –†–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å –Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
is_reg_dir, reg_val_dir = is_regular(total_deg_dir)
print(f"\n–†–µ–≥—É–ª—è—Ä–Ω–∏–π: {'Yes' if is_reg_dir else 'No'}, Degree: {reg_val_dir if is_reg_dir else '‚Äî'}")

# 4. –Ü–∑–æ–ª—å–æ–≤–∞–Ω—ñ —Ç–∞ –≤–∏—Å—è—á—ñ –≤–µ—Ä—à–∏–Ω–∏ (–Ω–∞–ø—Ä—è–º–ª–µ–Ω–∏–π)
isolated_dir, leaf_dir = get_isolated_and_leaf_vertices(total_deg_dir)
print(f"–Ü–∑–æ–ª—å–æ–≤–∞–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏: {isolated_dir}")
print(f"–í–∏—Å—è—á—ñ –≤–µ—Ä—à–∏–Ω–∏: {leaf_dir}")

print("\nüî∂ –ù–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ:")
print(" –í–µ—Ä—à–∏–Ω–∞ | –°—Ç–µ–ø—ñ–Ω—å")
for i in range(n):
    print(f"{i+1:>8} | {deg_undir[i]:>7}")

# 3. –†–µ–≥—É–ª—è—Ä–Ω—ñ—Å—Ç—å –Ω–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
is_reg_undir, reg_val_undir = is_regular(deg_undir)
print(f"\n–†–µ–≥—É–ª—è—Ä–Ω–∏–π: {'–¢–∞–∫' if is_reg_undir else '–ù—ñ'}, –°—Ç–µ–ø—ñ–Ω—å: {reg_val_undir if is_reg_undir else '‚Äî'}")

# 4. –Ü–∑–æ–ª—å–æ–≤–∞–Ω—ñ —Ç–∞ –≤–∏—Å—è—á—ñ –≤–µ—Ä—à–∏–Ω–∏ (–Ω–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–∏–π)
isolated_undir, leaf_undir = get_isolated_and_leaf_vertices(deg_undir)
print(f"–Ü–∑–æ–ª—å–æ–≤–∞–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏: {isolated_undir}")
print(f"–í–∏—Å—è—á—ñ –≤–µ—Ä—à–∏–Ω–∏: {leaf_undir}")

# 5. –í–∏–≤—ñ–¥ –º–∞—Ç—Ä–∏—Ü—å
def print_matrix(matrix, name):
    print(f"\n{name} (—Ä–æ–∑–º—ñ—Ä {len(matrix)}x{len(matrix[0])}):")
    for row in matrix:
        print(" ".join(str(elem) for elem in row))

print_matrix(Adir, "–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ –Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ Adir")
print_matrix(Aundir, "–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ –Ω–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ Aundir")

root.mainloop()
