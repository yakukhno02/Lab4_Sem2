import tkinter as tk
from graph_generator import generate_adjacency_matrices
from draw_graph import draw_graph
from graph_analysis import (
    get_degrees_directed,
    get_degrees_undirected,
    is_regular,
    get_isolated_and_leaf_vertices,
    transitive_closure,
    strong_connectivity_matrix,
    get_strong_components,
    build_condensation_graph,
    find_paths_of_length_2,
    find_paths_of_length_3
)

def print_matrix(matrix, name):
    print(f"\n{name} (—Ä–æ–∑–º—ñ—Ä {len(matrix)}x{len(matrix[0])}):")
    for row in matrix:
        print(" ".join(str(elem) for elem in row))


n1, n2, n3, n4 = 4, 1, 3, 3
Adir, Aundir, n = generate_adjacency_matrices(n1, n2, n3, n4)

print_matrix(Adir, "–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ –Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ Adir")
print_matrix(Aundir, "–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ –Ω–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ Adir")

root = tk.Tk()
root.title("–ì—Ä–∞—Ñ–∏")
canvas = tk.Canvas(root, width=1300, height=900, bg="white")
canvas.pack()

draw_graph(canvas, Adir, directed=True, n=n, offset_x=0, offset_y=100)
draw_graph(canvas, Aundir, directed=False, n=n, offset_x=650, offset_y=100)
canvas.create_text(325, 20, text="–ù–∞–ø—Ä—è–º–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ", font=("Arial", 14, "bold"))
canvas.create_text(975, 20, text="–ù–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ", font=("Arial", 14, "bold"))

in_deg, out_deg = get_degrees_directed(Adir)
deg_undir = get_degrees_undirected(Aundir)
total_deg_dir = [in_deg[i] + out_deg[i] for i in range(n)]

print("üî∑ –ù–∞–ø—ñ–≤—Å—Ç–µ–ø–µ–Ω—ñ —Ç–∞ –ø–æ–≤–Ω—ñ —Å—Ç–µ–ø–µ–Ω—ñ:")
print(" –í–µ—Ä—à–∏–Ω–∞ | –ù–∞–ø—ñ–≤—Å—Ç–µ–ø. –∑–∞—Ö–æ–¥—É | –ù–∞–ø—ñ–≤—Å—Ç–µ–ø. –≤–∏—Ö–æ–¥—É | –ü–æ–≤–Ω–∏–π —Å—Ç–µ–ø—ñ–Ω—å")
for i in range(n):
    print(f"{i+1:>8} | {in_deg[i]:>17} | {out_deg[i]:>17} | {total_deg_dir[i]:>16}")

is_reg_dir, reg_val_dir = is_regular(total_deg_dir)
print(f"\n–†–µ–≥—É–ª—è—Ä–Ω–∏–π: {'Yes' if is_reg_dir else 'No'}, Degree: {reg_val_dir if is_reg_dir else '‚Äî'}")

isolated_dir, leaf_dir = get_isolated_and_leaf_vertices(total_deg_dir)
print(f"–Ü–∑–æ–ª—å–æ–≤–∞–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏: {isolated_dir}")
print(f"–í–∏—Å—è—á—ñ –≤–µ—Ä—à–∏–Ω–∏: {leaf_dir}")

print("\nüî∂ –ù–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ:")
print(" –í–µ—Ä—à–∏–Ω–∞ | –°—Ç–µ–ø—ñ–Ω—å")
for i in range(n):
    print(f"{i+1:>8} | {deg_undir[i]:>7}")

is_reg_undir, reg_val_undir = is_regular(deg_undir)
print(f"\n–†–µ–≥—É–ª—è—Ä–Ω–∏–π: {'–¢–∞–∫' if is_reg_undir else '–ù—ñ'}, –°—Ç–µ–ø—ñ–Ω—å: {reg_val_undir if is_reg_undir else '‚Äî'}")

isolated_undir, leaf_undir = get_isolated_and_leaf_vertices(deg_undir)
print(f"–Ü–∑–æ–ª—å–æ–≤–∞–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏: {isolated_undir}")
print(f"–í–∏—Å—è—á—ñ –≤–µ—Ä—à–∏–Ω–∏: {leaf_undir}")

def print_matrix(matrix, name):
    print(f"\n{name} (—Ä–æ–∑–º—ñ—Ä {len(matrix)}x{len(matrix[0])}):")
    for row in matrix:
        print(" ".join(str(elem) for elem in row))

print_matrix(Adir, "–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ –Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ Adir")
print_matrix(Aundir, "–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ –Ω–µ–Ω–∞–ø—Ä—è–º–ª–µ–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ Aundir")

def print_paths_limited(paths, title, max_width=100):
    print(f"\n{title}")
    current_line = ""
    for path in paths:
        path_str = "‚Üí".join(map(str, path))
        if len(current_line) + len(path_str) + 2 > max_width:
            print(current_line.strip())
            current_line = ""
        current_line += path_str + "  "
    if current_line:
        print(current_line.strip())

paths_2 = find_paths_of_length_2(Adir)
paths_3 = find_paths_of_length_3(Adir)

print_paths_limited(paths_2, "üîÅ –®–ª—è—Ö–∏ –¥–æ–≤–∂–∏–Ω–∏ 2:")
print_paths_limited(paths_3, "üîÅ –®–ª—è—Ö–∏ –¥–æ–≤–∂–∏–Ω–∏ 3:")

reach = transitive_closure(Adir)
print_matrix(reach, "üß≠ –ú–∞—Ç—Ä–∏—Ü—è –¥–æ—Å—è–∂–Ω–æ—Å—Ç—ñ")

strong = strong_connectivity_matrix(reach)
print_matrix(strong, "üîó –ú–∞—Ç—Ä–∏—Ü—è —Å–∏–ª—å–Ω–æ—ó –∑–≤‚Äô—è–∑–Ω–æ—Å—Ç—ñ")

components = get_strong_components(strong)
print("\nüì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏–ª—å–Ω–æ—ó –∑–≤‚Äô—è–∑–Ω–æ—Å—Ç—ñ:")
for i, comp in enumerate(components, 1):
    print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {i}: {comp}")

cond_matrix = build_condensation_graph(Adir, components)
print_matrix(cond_matrix.tolist(), "üß© –ú–∞—Ç—Ä–∏—Ü—è –≥—Ä–∞—Ñ–∞ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü—ñ—ó")

draw_graph(canvas, cond_matrix.tolist(), directed=True, n=len(components), offset_x=325, offset_y=650)
canvas.create_text(650, 580, text="–ì—Ä–∞—Ñ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü—ñ—ó", font=("Arial", 14, "bold"))

root.mainloop()